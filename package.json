{
  "name": "coc-lua",
  "version": "1.0.1",
  "description": "lua extension for coc",
  "author": "josa@gesell.me",
  "license": "MIT",
  "main": "lib/extension.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/josa42/coc-lua.git"
  },
  "engines": {
    "coc": "^0.0.65"
  },
  "keywords": [
    "coc.nvim",
    "languageserver",
    "lua"
  ],
  "scripts": {
    "clean": "rimraf lib",
    "build": "tsc -p tsconfig.json",
    "build:watch": "tsc --watch -p tsconfig.json",
    "prepare": "yarn clean && yarn build",
    "lint:fix": "eslint . --ext .ts,.js --fix",
    "lint": "eslint . --ext .ts,.js",
    "link": "yarn build && coc-dev link",
    "unlink": "coc-dev unlink",
    "test": "jest"
  },
  "activationEvents": [
    "onLanguage:lua",
    "onCommand:lua.version",
    "onCommand:lua.update"
  ],
  "contributes": {
    "configuration": {
      "type": "object",
      "title": "lua",
      "properties": {
        "lua.enable": {
          "type": "boolean",
          "default": true
        },
        "lua.checkForUpdates": {
          "description": "Check for sumneko/lua-language-server updates on start.",
          "type": "string",
          "default": "inform",
          "enum": [
            "disabled",
            "inform",
            "ask",
            "install"
          ]
        },
        "lua.installPreReleases": {
          "description": "Install latest pre-release of sumneko/lua-language-server.",
          "type": "boolean",
          "default": false
        },
        "lua.trace.server": {
          "type": "string",
          "default": "off",
          "enum": [
            "off",
            "messages",
            "verbose"
          ]
        },
        "lua.runtime.fileEncoding": {
          "default": "utf8",
          "enum": [
            "utf8",
            "ansi"
          ],
          "markdownDescription": "File encoding. The `ansi` option is only available under the `Windows` platform.",
          "scope": "resource",
          "type": "string"
        },
        "color": {
          "properties": {
            "mode": {
              "$ref": "#/properties/color.mode"
            }
          }
        },
        "color.mode": {
          "default": "Semantic",
          "enum": [
            "Grammar",
            "Semantic",
            "SemanticEnhanced"
          ],
          "markdownDescription": "Color mode.",
          "markdownEnumDescriptions": [
            "Grammar color.",
            "Semantic color. You may need to set `editor.semanticHighlighting.enabled` to `true` to take effect.",
            "Enhanced semantic color. Like `Semantic`, but with additional analysis which might be more computationally expensive."
          ],
          "scope": "window",
          "type": "string"
        },
        "completion": {
          "properties": {
            "autoRequire": {
              "$ref": "#/properties/completion.autoRequire"
            },
            "callSnippet": {
              "$ref": "#/properties/completion.callSnippet"
            },
            "displayContext": {
              "$ref": "#/properties/completion.displayContext"
            },
            "enable": {
              "$ref": "#/properties/completion.enable"
            },
            "keywordSnippet": {
              "$ref": "#/properties/completion.keywordSnippet"
            },
            "requireSeparator": {
              "$ref": "#/properties/completion.requireSeparator"
            },
            "showParams": {
              "$ref": "#/properties/completion.showParams"
            },
            "showWord": {
              "$ref": "#/properties/completion.showWord"
            },
            "workspaceWord": {
              "$ref": "#/properties/completion.workspaceWord"
            }
          }
        },
        "completion.autoRequire": {
          "default": true,
          "markdownDescription": "When the input looks like a file name, automatically `require` this file.",
          "scope": "window",
          "type": "boolean"
        },
        "completion.callSnippet": {
          "default": "Disable",
          "enum": [
            "Disable",
            "Both",
            "Replace"
          ],
          "markdownDescription": "Shows function call snippets.",
          "markdownEnumDescriptions": [
            "Only shows `function name`.",
            "Shows `function name` and `call snippet`.",
            "Only shows `call snippet.`"
          ],
          "scope": "window",
          "type": "string"
        },
        "completion.displayContext": {
          "default": 0,
          "markdownDescription": "Previewing the relevant code snippet of the suggestion may help you understand the usage of the suggestion. The number set indicates the number of intercepted lines in the code fragment. If it is set to `0`, this feature can be disabled.",
          "scope": "window",
          "type": "integer"
        },
        "completion.enable": {
          "default": true,
          "markdownDescription": "Enable completion.",
          "scope": "window",
          "type": "boolean"
        },
        "completion.keywordSnippet": {
          "default": "Replace",
          "enum": [
            "Disable",
            "Both",
            "Replace"
          ],
          "markdownDescription": "Shows keyword syntax snippets.",
          "markdownEnumDescriptions": [
            "Only shows `keyword`.",
            "Shows `keyword` and `syntax snippet`.",
            "Only shows `syntax snippet`."
          ],
          "scope": "window",
          "type": "string"
        },
        "completion.requireSeparator": {
          "default": ".",
          "markdownDescription": "The separator used when `require`.",
          "scope": "window",
          "type": "string"
        },
        "completion.showParams": {
          "default": true,
          "markdownDescription": "Display parameters in completion list. When the function has multiple definitions, they will be displayed separately.",
          "scope": "window",
          "type": "boolean"
        },
        "completion.showWord": {
          "default": "Fallback",
          "enum": [
            "Enable",
            "Fallback",
            "Disable"
          ],
          "markdownDescription": "Show contextual words in suggestions.",
          "markdownEnumDescriptions": [
            "Always show context words in suggestions.",
            "Contextual words are only displayed when suggestions based on semantics cannot be provided.",
            "Do not display context words."
          ],
          "scope": "window",
          "type": "string"
        },
        "completion.workspaceWord": {
          "default": true,
          "markdownDescription": "Whether the displayed context word contains the content of other files in the workspace.",
          "scope": "window",
          "type": "boolean"
        },
        "diagnostics": {
          "properties": {
            "disable": {
              "$ref": "#/properties/diagnostics.disable"
            },
            "enable": {
              "$ref": "#/properties/diagnostics.enable"
            },
            "globals": {
              "$ref": "#/properties/diagnostics.globals"
            },
            "ignoredFiles": {
              "$ref": "#/properties/diagnostics.ignoredFiles"
            },
            "libraryFiles": {
              "$ref": "#/properties/diagnostics.libraryFiles"
            },
            "neededFileStatus": {
              "$ref": "#/properties/diagnostics.neededFileStatus"
            },
            "severity": {
              "$ref": "#/properties/diagnostics.severity"
            },
            "workspaceDelay": {
              "$ref": "#/properties/diagnostics.workspaceDelay"
            },
            "workspaceRate": {
              "$ref": "#/properties/diagnostics.workspaceRate"
            }
          }
        },
        "diagnostics.disable": {
          "items": {
            "type": "string"
          },
          "markdownDescription": "Disabled diagnostic (Use code in hover brackets).\n",
          "scope": "window",
          "type": "array"
        },
        "diagnostics.enable": {
          "default": true,
          "markdownDescription": "Enable diagnostics.",
          "scope": "window",
          "type": "boolean"
        },
        "diagnostics.globals": {
          "items": {
            "type": "string"
          },
          "markdownDescription": "Defined global variables.\n",
          "scope": "window",
          "type": "array"
        },
        "diagnostics.ignoredFiles": {
          "default": "Opened",
          "enum": [
            "Enable",
            "Opened",
            "Disable"
          ],
          "markdownDescription": "How to diagnose ignored files.",
          "markdownEnumDescriptions": [
            "Always diagnose these files.",
            "Only when these files are opened will it be diagnosed.",
            "These files are not diagnosed."
          ],
          "scope": "window",
          "type": "string"
        },
        "diagnostics.libraryFiles": {
          "default": "Opened",
          "enum": [
            "Enable",
            "Opened",
            "Disable"
          ],
          "markdownDescription": "How to diagnose files loaded via `Lua.workspace.library`.",
          "markdownEnumDescriptions": [
            "Always diagnose these files.",
            "Only when these files are opened will it be diagnosed.",
            "These files are not diagnosed."
          ],
          "scope": "window",
          "type": "string"
        },
        "diagnostics.neededFileStatus": {
          "additionalProperties": false,
          "markdownDescription": "If you want to check only opened files, choice Opened; else choice Any.\n",
          "properties": {
            "ambiguity-1": {
              "default": "Any",
              "description": "%config.diagnostics.ambiguity-1%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            },
            "circle-doc-class": {
              "default": "Any",
              "description": "%config.diagnostics.circle-doc-class%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            },
            "close-non-object": {
              "default": "Any",
              "description": "%config.diagnostics.close-non-object%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            },
            "code-after-break": {
              "default": "Opened",
              "description": "%config.diagnostics.code-after-break%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            },
            "count-down-loop": {
              "default": "Any",
              "description": "%config.diagnostics.count-down-loop%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            },
            "deprecated": {
              "default": "Opened",
              "description": "%config.diagnostics.deprecated%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            },
            "different-requires": {
              "default": "Any",
              "description": "%config.diagnostics.different-requires%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            },
            "doc-field-no-class": {
              "default": "Any",
              "description": "%config.diagnostics.doc-field-no-class%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            },
            "duplicate-doc-class": {
              "default": "Any",
              "description": "%config.diagnostics.duplicate-doc-class%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            },
            "duplicate-doc-field": {
              "default": "Any",
              "description": "%config.diagnostics.duplicate-doc-field%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            },
            "duplicate-doc-param": {
              "default": "Any",
              "description": "%config.diagnostics.duplicate-doc-param%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            },
            "duplicate-index": {
              "default": "Any",
              "description": "%config.diagnostics.duplicate-index%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            },
            "duplicate-set-field": {
              "default": "Any",
              "description": "%config.diagnostics.duplicate-set-field%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            },
            "empty-block": {
              "default": "Opened",
              "description": "%config.diagnostics.empty-block%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            },
            "global-in-nil-env": {
              "default": "Any",
              "description": "%config.diagnostics.global-in-nil-env%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            },
            "lowercase-global": {
              "default": "Any",
              "description": "%config.diagnostics.lowercase-global%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            },
            "newfield-call": {
              "default": "Any",
              "description": "%config.diagnostics.newfield-call%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            },
            "newline-call": {
              "default": "Any",
              "description": "%config.diagnostics.newline-call%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            },
            "no-implicit-any": {
              "default": "None",
              "description": "%config.diagnostics.no-implicit-any%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            },
            "redefined-local": {
              "default": "Opened",
              "description": "%config.diagnostics.redefined-local%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            },
            "redundant-parameter": {
              "default": "Opened",
              "description": "%config.diagnostics.redundant-parameter%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            },
            "redundant-return": {
              "default": "Opened",
              "description": "%config.diagnostics.redundant-return%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            },
            "redundant-value": {
              "default": "Opened",
              "description": "%config.diagnostics.redundant-value%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            },
            "trailing-space": {
              "default": "Opened",
              "description": "%config.diagnostics.trailing-space%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            },
            "type-check": {
              "default": "None",
              "description": "%config.diagnostics.type-check%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            },
            "unbalanced-assignments": {
              "default": "Any",
              "description": "%config.diagnostics.unbalanced-assignments%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            },
            "undefined-doc-class": {
              "default": "Any",
              "description": "%config.diagnostics.undefined-doc-class%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            },
            "undefined-doc-name": {
              "default": "Any",
              "description": "%config.diagnostics.undefined-doc-name%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            },
            "undefined-doc-param": {
              "default": "Any",
              "description": "%config.diagnostics.undefined-doc-param%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            },
            "undefined-env-child": {
              "default": "Any",
              "description": "%config.diagnostics.undefined-env-child%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            },
            "undefined-field": {
              "default": "Opened",
              "description": "%config.diagnostics.undefined-field%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            },
            "undefined-global": {
              "default": "Any",
              "description": "%config.diagnostics.undefined-global%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            },
            "unknown-diag-code": {
              "default": "Any",
              "description": "%config.diagnostics.unknown-diag-code%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            },
            "unused-function": {
              "default": "Opened",
              "description": "%config.diagnostics.unused-function%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            },
            "unused-label": {
              "default": "Opened",
              "description": "%config.diagnostics.unused-label%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            },
            "unused-local": {
              "default": "Opened",
              "description": "%config.diagnostics.unused-local%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            },
            "unused-vararg": {
              "default": "Opened",
              "description": "%config.diagnostics.unused-vararg%",
              "enum": [
                "Any",
                "Opened",
                "None"
              ],
              "type": "string"
            }
          },
          "scope": "window",
          "title": "neededFileStatus",
          "type": "object"
        },
        "diagnostics.severity": {
          "additionalProperties": false,
          "markdownDescription": "Modified diagnostic severity.\n",
          "properties": {
            "ambiguity-1": {
              "default": "Warning",
              "description": "%config.diagnostics.ambiguity-1%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            },
            "circle-doc-class": {
              "default": "Warning",
              "description": "%config.diagnostics.circle-doc-class%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            },
            "close-non-object": {
              "default": "Warning",
              "description": "%config.diagnostics.close-non-object%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            },
            "code-after-break": {
              "default": "Hint",
              "description": "%config.diagnostics.code-after-break%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            },
            "count-down-loop": {
              "default": "Warning",
              "description": "%config.diagnostics.count-down-loop%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            },
            "deprecated": {
              "default": "Warning",
              "description": "%config.diagnostics.deprecated%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            },
            "different-requires": {
              "default": "Warning",
              "description": "%config.diagnostics.different-requires%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            },
            "doc-field-no-class": {
              "default": "Warning",
              "description": "%config.diagnostics.doc-field-no-class%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            },
            "duplicate-doc-class": {
              "default": "Warning",
              "description": "%config.diagnostics.duplicate-doc-class%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            },
            "duplicate-doc-field": {
              "default": "Warning",
              "description": "%config.diagnostics.duplicate-doc-field%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            },
            "duplicate-doc-param": {
              "default": "Warning",
              "description": "%config.diagnostics.duplicate-doc-param%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            },
            "duplicate-index": {
              "default": "Warning",
              "description": "%config.diagnostics.duplicate-index%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            },
            "duplicate-set-field": {
              "default": "Warning",
              "description": "%config.diagnostics.duplicate-set-field%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            },
            "empty-block": {
              "default": "Hint",
              "description": "%config.diagnostics.empty-block%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            },
            "global-in-nil-env": {
              "default": "Warning",
              "description": "%config.diagnostics.global-in-nil-env%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            },
            "lowercase-global": {
              "default": "Information",
              "description": "%config.diagnostics.lowercase-global%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            },
            "newfield-call": {
              "default": "Warning",
              "description": "%config.diagnostics.newfield-call%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            },
            "newline-call": {
              "default": "Information",
              "description": "%config.diagnostics.newline-call%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            },
            "no-implicit-any": {
              "default": "Information",
              "description": "%config.diagnostics.no-implicit-any%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            },
            "redefined-local": {
              "default": "Hint",
              "description": "%config.diagnostics.redefined-local%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            },
            "redundant-parameter": {
              "default": "Warning",
              "description": "%config.diagnostics.redundant-parameter%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            },
            "redundant-return": {
              "default": "Warning",
              "description": "%config.diagnostics.redundant-return%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            },
            "redundant-value": {
              "default": "Warning",
              "description": "%config.diagnostics.redundant-value%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            },
            "trailing-space": {
              "default": "Hint",
              "description": "%config.diagnostics.trailing-space%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            },
            "type-check": {
              "default": "Warning",
              "description": "%config.diagnostics.type-check%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            },
            "unbalanced-assignments": {
              "default": "Warning",
              "description": "%config.diagnostics.unbalanced-assignments%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            },
            "undefined-doc-class": {
              "default": "Warning",
              "description": "%config.diagnostics.undefined-doc-class%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            },
            "undefined-doc-name": {
              "default": "Warning",
              "description": "%config.diagnostics.undefined-doc-name%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            },
            "undefined-doc-param": {
              "default": "Warning",
              "description": "%config.diagnostics.undefined-doc-param%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            },
            "undefined-env-child": {
              "default": "Information",
              "description": "%config.diagnostics.undefined-env-child%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            },
            "undefined-field": {
              "default": "Warning",
              "description": "%config.diagnostics.undefined-field%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            },
            "undefined-global": {
              "default": "Warning",
              "description": "%config.diagnostics.undefined-global%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            },
            "unknown-diag-code": {
              "default": "Waiting",
              "description": "%config.diagnostics.unknown-diag-code%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            },
            "unused-function": {
              "default": "Hint",
              "description": "%config.diagnostics.unused-function%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            },
            "unused-label": {
              "default": "Hint",
              "description": "%config.diagnostics.unused-label%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            },
            "unused-local": {
              "default": "Hint",
              "description": "%config.diagnostics.unused-local%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            },
            "unused-vararg": {
              "default": "Hint",
              "description": "%config.diagnostics.unused-vararg%",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "type": "string"
            }
          },
          "scope": "window",
          "title": "severity",
          "type": "object"
        },
        "diagnostics.workspaceDelay": {
          "default": 0,
          "markdownDescription": "Latency (milliseconds) for workspace diagnostics. When you start the workspace, or edit any file, the entire workspace will be re-diagnosed in the background. Set to negative to disable workspace diagnostics.",
          "scope": "window",
          "type": "integer"
        },
        "diagnostics.workspaceRate": {
          "default": 100,
          "markdownDescription": "Workspace diagnostics run rate (%). Decreasing this value reduces CPU usage, but also reduces the speed of workspace diagnostics. The diagnosis of the file you are currently editing is always done at full speed and is not affected by this setting.",
          "scope": "window",
          "type": "integer"
        },
        "hint": {
          "properties": {
            "enable": {
              "$ref": "#/properties/hint.enable"
            },
            "paramName": {
              "$ref": "#/properties/hint.paramName"
            },
            "paramType": {
              "$ref": "#/properties/hint.paramType"
            },
            "setType": {
              "$ref": "#/properties/hint.setType"
            }
          }
        },
        "hint.enable": {
          "default": false,
          "markdownDescription": "Enabel hint.",
          "scope": "window",
          "type": "boolean"
        },
        "hint.paramName": {
          "default": "All",
          "enum": [
            "All",
            "Literal",
            "Disable"
          ],
          "markdownDescription": "Show hints of parameter name at the function call.",
          "markdownEnumDescriptions": [
            "All types of parameters are shown.",
            "Only literal type parameters are shown.",
            "Disable parameter hints."
          ],
          "scope": "window",
          "type": "string"
        },
        "hint.paramType": {
          "default": true,
          "markdownDescription": "Show type hints at the parameter of the function.",
          "scope": "window",
          "type": "boolean"
        },
        "hint.setType": {
          "default": false,
          "markdownDescription": "Show hints of type at assignment operation.",
          "scope": "window",
          "type": "boolean"
        },
        "hover": {
          "properties": {
            "enable": {
              "$ref": "#/properties/hover.enable"
            },
            "enumsLimit": {
              "$ref": "#/properties/hover.enumsLimit"
            },
            "previewFields": {
              "$ref": "#/properties/hover.previewFields"
            },
            "viewNumber": {
              "$ref": "#/properties/hover.viewNumber"
            },
            "viewString": {
              "$ref": "#/properties/hover.viewString"
            },
            "viewStringMax": {
              "$ref": "#/properties/hover.viewStringMax"
            }
          }
        },
        "hover.enable": {
          "default": true,
          "markdownDescription": "Enable hover.",
          "scope": "window",
          "type": "boolean"
        },
        "hover.enumsLimit": {
          "default": 5,
          "markdownDescription": "When the value corresponds to multiple types, limit the number of types displaying.",
          "scope": "window",
          "type": "integer"
        },
        "hover.previewFields": {
          "default": 20,
          "markdownDescription": "When hovering to view a table, limits the maximum number of previews for fields.",
          "scope": "window",
          "type": "integer"
        },
        "hover.viewNumber": {
          "default": true,
          "markdownDescription": "Hover to view numeric content (only if literal is not decimal).",
          "scope": "window",
          "type": "boolean"
        },
        "hover.viewString": {
          "default": true,
          "markdownDescription": "Hover to view the contents of a string (only if the literal contains an escape character).",
          "scope": "window",
          "type": "boolean"
        },
        "hover.viewStringMax": {
          "default": 1000,
          "markdownDescription": "The maximum length of a hover to view the contents of a string.",
          "scope": "window",
          "type": "integer"
        },
        "misc": {
          "properties": {
            "parameters": {
              "$ref": "#/properties/misc.parameters"
            }
          }
        },
        "misc.parameters": {
          "items": {
            "type": "string"
          },
          "markdownDescription": "[Command line parameters](https://github.com/sumneko/lua-telemetry-server/tree/master/method) when starting the language service in VSCode.",
          "scope": "window",
          "type": "array"
        },
        "runtime": {
          "properties": {
            "builtin": {
              "$ref": "#/properties/runtime.builtin"
            },
            "fileEncoding": {
              "$ref": "#/properties/runtime.fileEncoding"
            },
            "nonstandardSymbol": {
              "$ref": "#/properties/runtime.nonstandardSymbol"
            },
            "path": {
              "$ref": "#/properties/runtime.path"
            },
            "pathStrict": {
              "$ref": "#/properties/runtime.pathStrict"
            },
            "plugin": {
              "$ref": "#/properties/runtime.plugin"
            },
            "special": {
              "$ref": "#/properties/runtime.special"
            },
            "unicodeName": {
              "$ref": "#/properties/runtime.unicodeName"
            },
            "version": {
              "$ref": "#/properties/runtime.version"
            }
          }
        },
        "runtime.builtin": {
          "additionalProperties": false,
          "markdownDescription": "Adjust the enabled state of the built-in library. You can disable (or redefine) the non-existent library according to the actual runtime environment.\n\n* `default`: Indicates that the library will be enabled or disabled according to the runtime version\n* `enable`: always enable\n* `disable`: always disable\n",
          "properties": {
            "basic": {
              "default": "default",
              "description": "%config.runtime.builtin.basic%",
              "enum": [
                "default",
                "enable",
                "disable"
              ],
              "type": "string"
            },
            "bit": {
              "default": "default",
              "description": "%config.runtime.builtin.bit%",
              "enum": [
                "default",
                "enable",
                "disable"
              ],
              "type": "string"
            },
            "bit32": {
              "default": "default",
              "description": "%config.runtime.builtin.bit32%",
              "enum": [
                "default",
                "enable",
                "disable"
              ],
              "type": "string"
            },
            "builtin": {
              "default": "default",
              "description": "%config.runtime.builtin.builtin%",
              "enum": [
                "default",
                "enable",
                "disable"
              ],
              "type": "string"
            },
            "coroutine": {
              "default": "default",
              "description": "%config.runtime.builtin.coroutine%",
              "enum": [
                "default",
                "enable",
                "disable"
              ],
              "type": "string"
            },
            "debug": {
              "default": "default",
              "description": "%config.runtime.builtin.debug%",
              "enum": [
                "default",
                "enable",
                "disable"
              ],
              "type": "string"
            },
            "ffi": {
              "default": "default",
              "description": "%config.runtime.builtin.ffi%",
              "enum": [
                "default",
                "enable",
                "disable"
              ],
              "type": "string"
            },
            "io": {
              "default": "default",
              "description": "%config.runtime.builtin.io%",
              "enum": [
                "default",
                "enable",
                "disable"
              ],
              "type": "string"
            },
            "jit": {
              "default": "default",
              "description": "%config.runtime.builtin.jit%",
              "enum": [
                "default",
                "enable",
                "disable"
              ],
              "type": "string"
            },
            "math": {
              "default": "default",
              "description": "%config.runtime.builtin.math%",
              "enum": [
                "default",
                "enable",
                "disable"
              ],
              "type": "string"
            },
            "os": {
              "default": "default",
              "description": "%config.runtime.builtin.os%",
              "enum": [
                "default",
                "enable",
                "disable"
              ],
              "type": "string"
            },
            "package": {
              "default": "default",
              "description": "%config.runtime.builtin.package%",
              "enum": [
                "default",
                "enable",
                "disable"
              ],
              "type": "string"
            },
            "string": {
              "default": "default",
              "description": "%config.runtime.builtin.string%",
              "enum": [
                "default",
                "enable",
                "disable"
              ],
              "type": "string"
            },
            "table": {
              "default": "default",
              "description": "%config.runtime.builtin.table%",
              "enum": [
                "default",
                "enable",
                "disable"
              ],
              "type": "string"
            },
            "utf8": {
              "default": "default",
              "description": "%config.runtime.builtin.utf8%",
              "enum": [
                "default",
                "enable",
                "disable"
              ],
              "type": "string"
            }
          },
          "scope": "window",
          "type": "object"
        },
        "runtime.fileEncoding": {
          "default": "utf8",
          "enum": [
            "utf8",
            "ansi",
            "utf16le",
            "utf16be"
          ],
          "markdownDescription": "File encoding. The `ansi` option is only available under the `Windows` platform.",
          "scope": "window",
          "type": "string"
        },
        "runtime.nonstandardSymbol": {
          "items": {
            "enum": [
              "//",
              "/**/",
              "`",
              "+=",
              "-=",
              "*=",
              "/=",
              "||",
              "&&",
              "!",
              "!=",
              "continue"
            ],
            "type": "string"
          },
          "markdownDescription": "Supports non-standard symbols. Make sure that your runtime environment supports these symbols.",
          "scope": "window",
          "type": "array"
        },
        "runtime.path": {
          "default": [
            "?.lua",
            "?/init.lua"
          ],
          "items": {
            "type": "string"
          },
          "markdownDescription": "When using `require`, how to find the file based on the input name.\nSetting this config to `?/init.lua` means that when you enter `require 'myfile'`, `${workspace}/myfile/init.lua` will be searched from the loaded files.\nif `runtime.pathStrict` is `false`, `${workspace}/**/myfile/init.lua` will also be searched.\nIf you want to load files outside the workspace, you need to set `Lua.workspace.library` first.\n",
          "scope": "window",
          "type": "array"
        },
        "runtime.plugin": {
          "default": "",
          "markdownDescription": "Plugin path. Please read [wiki](https://github.com/sumneko/lua-language-server/wiki/Plugin) to learn more.",
          "scope": "window",
          "type": "string"
        },
        "runtime.special": {
          "additionalProperties": false,
          "markdownDescription": "The custom global variables are regarded as some special built-in variables, and the language server will provide special support\nThe following example shows that 'include' is treated as' require '.\n```json\n\"Lua.runtime.special\" : {\n    \"include\" : \"require\"\n}\n```\n",
          "patternProperties": {
            ".*": {
              "default": "require",
              "enum": [
                "_G",
                "rawset",
                "rawget",
                "setmetatable",
                "require",
                "dofile",
                "loadfile",
                "pcall",
                "xpcall"
              ],
              "type": "string"
            }
          },
          "scope": "window",
          "type": "object"
        },
        "runtime.unicodeName": {
          "default": false,
          "markdownDescription": "Allows Unicode characters in name.",
          "scope": "window",
          "type": "boolean"
        },
        "runtime.version": {
          "default": "Lua 5.4",
          "enum": [
            "Lua 5.1",
            "Lua 5.2",
            "Lua 5.3",
            "Lua 5.4",
            "LuaJIT"
          ],
          "markdownDescription": "Lua runtime version.",
          "scope": "window",
          "type": "string"
        },
        "signatureHelp": {
          "properties": {
            "enable": {
              "$ref": "#/properties/signatureHelp.enable"
            }
          }
        },
        "signatureHelp.enable": {
          "default": true,
          "markdownDescription": "Enable signature help.",
          "scope": "window",
          "type": "boolean"
        },
        "telemetry": {
          "properties": {
            "enable": {
              "$ref": "#/properties/telemetry.enable"
            }
          }
        },
        "telemetry.enable": {
          "default": null,
          "markdownDescription": "Enable telemetry to send your editor information and error logs over the network. Read our privacy policy [here](https://github.com/sumneko/lua-language-server/wiki/Privacy-Policy).\n",
          "scope": "window",
          "type": [
            "boolean",
            "null"
          ]
        },
        "window": {
          "properties": {
            "progressBar": {
              "$ref": "#/properties/window.progressBar"
            },
            "statusBar": {
              "$ref": "#/properties/window.statusBar"
            }
          }
        },
        "window.progressBar": {
          "default": true,
          "markdownDescription": "Show progress bar in status bar.",
          "scope": "window",
          "type": "boolean"
        },
        "window.statusBar": {
          "default": true,
          "markdownDescription": "Show extension status in status bar.",
          "scope": "window",
          "type": "boolean"
        },
        "workspace": {
          "properties": {
            "checkThirdParty": {
              "$ref": "#/properties/workspace.checkThirdParty"
            },
            "ignoreDir": {
              "$ref": "#/properties/workspace.ignoreDir"
            },
            "ignoreSubmodules": {
              "$ref": "#/properties/workspace.ignoreSubmodules"
            },
            "library": {
              "$ref": "#/properties/workspace.library"
            },
            "maxPreload": {
              "$ref": "#/properties/workspace.maxPreload"
            },
            "preloadFileSize": {
              "$ref": "#/properties/workspace.preloadFileSize"
            },
            "useGitIgnore": {
              "$ref": "#/properties/workspace.useGitIgnore"
            },
            "userThirdParty": {
              "$ref": "#/properties/workspace.userThirdParty"
            }
          }
        },
        "workspace.checkThirdParty": {
          "default": true,
          "markdownDescription": "Automatic detection and adaptation of third-party libraries, currently supported libraries are:\n\n* OpenResty\n* Cocos4.0\n* LÖVE\n* skynet\n* Jass\n",
          "scope": "window",
          "type": "boolean"
        },
        "workspace.ignoreDir": {
          "default": [
            ".vscode"
          ],
          "items": {
            "type": "string"
          },
          "markdownDescription": "Ignored files and directories (Use `.gitignore` grammar).\n",
          "scope": "window",
          "type": "array"
        },
        "workspace.ignoreSubmodules": {
          "default": true,
          "markdownDescription": "Ignore submodules.",
          "scope": "window",
          "type": "boolean"
        },
        "workspace.library": {
          "items": {
            "type": "string"
          },
          "markdownDescription": "In addition to the current workspace, which directories will load files from.",
          "scope": "window",
          "type": "array"
        },
        "workspace.maxPreload": {
          "default": 1000,
          "markdownDescription": "Max preloaded files.",
          "scope": "window",
          "type": "integer"
        },
        "workspace.preloadFileSize": {
          "default": 100,
          "markdownDescription": "Skip files larger than this value (KB) when preloading.",
          "scope": "window",
          "type": "integer"
        },
        "workspace.useGitIgnore": {
          "default": true,
          "markdownDescription": "Ignore files list in `.gitignore` .",
          "scope": "window",
          "type": "boolean"
        },
        "workspace.userThirdParty": {
          "items": {
            "type": "string"
          },
          "markdownDescription": "Add private third-party library configuration file paths here, please refer to the built-in [configuration file path](https://github.com/sumneko/lua-language-server/tree/master/meta/3rd)",
          "scope": "window",
          "type": "array"
        },
        "runtime.pathStrict": {
          "default": false,
          "markdownDescription": "When enabled, `runtime.path` will only search the first level of directories, see the description of `runtime.path`.",
          "scope": "window",
          "type": "boolean"
        },
        "IntelliSense": {
          "properties": {
            "traceBeSetted": {
              "$ref": "#/properties/IntelliSense.traceBeSetted"
            },
            "traceFieldInject": {
              "$ref": "#/properties/IntelliSense.traceFieldInject"
            },
            "traceLocalSet": {
              "$ref": "#/properties/IntelliSense.traceLocalSet"
            },
            "traceReturn": {
              "$ref": "#/properties/IntelliSense.traceReturn"
            }
          }
        },
        "IntelliSense.traceBeSetted": {
          "default": false,
          "markdownDescription": "Please read [wiki](https://github.com/sumneko/lua-language-server/wiki/IntelliSense-optional-features) to learn more.",
          "scope": "window",
          "type": "boolean"
        },
        "IntelliSense.traceFieldInject": {
          "default": false,
          "markdownDescription": "Please read [wiki](https://github.com/sumneko/lua-language-server/wiki/IntelliSense-optional-features) to learn more.",
          "scope": "window",
          "type": "boolean"
        },
        "IntelliSense.traceLocalSet": {
          "default": false,
          "markdownDescription": "Please read [wiki](https://github.com/sumneko/lua-language-server/wiki/IntelliSense-optional-features) to learn more.",
          "scope": "window",
          "type": "boolean"
        },
        "IntelliSense.traceReturn": {
          "default": false,
          "markdownDescription": "Please read [wiki](https://github.com/sumneko/lua-language-server/wiki/IntelliSense-optional-features) to learn more.",
          "scope": "window",
          "type": "boolean"
        }
      }
    },
    "commands": [
      {
        "command": "lua.version",
        "title": "Print extension version"
      },
      {
        "command": "lua.update",
        "title": "Update lua-lsp"
      }
    ]
  },
  "devDependencies": {
    "@chemzqm/tsconfig": "^0.0.3",
    "@types/jest": "^26.0.20",
    "@types/node": "^14.14.20",
    "@types/tar": "^4.0.4",
    "@types/which": "^2.0.0",
    "@typescript-eslint/eslint-plugin": "^4.12.0",
    "@typescript-eslint/parser": "^4.12.0",
    "coc-dev-tools": "^0.1.0",
    "coc.nvim": "0.0.80",
    "eslint": "7.17.0",
    "eslint-config-josa-typescript": "^0.1.2",
    "jest": "^26.6.3",
    "rimraf": "^3.0.2",
    "ts-jest": "^26.4.4",
    "typescript": "^4.1.2"
  },
  "dependencies": {
    "tar": "^6.0.5",
    "tslib": "^2.1.0",
    "which": "^2.0.2"
  }
}
